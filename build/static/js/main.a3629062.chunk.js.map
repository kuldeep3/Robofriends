{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","containers/App.js","serviceWorker.js","index.js"],"names":["Card","_ref","name","email","id","react_default","a","createElement","className","alt","src","concat","CardList","robots","map","user","i","components_Card","key","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onSearchChange","event","setState","target","value","state","_this2","fetch","then","response","json","users","_this$state","filteredRobots","filter","robot","toLowerCase","includes","length","components_SearchBox","components_Scroll","components_CardList","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_containers_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"yNAceA,EAZF,SAAAC,GAAyB,IAAtBC,EAAsBD,EAAtBC,KAAMC,EAAgBF,EAAhBE,MAAOC,EAASH,EAATG,GAC5B,OACKC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,uDACdH,EAAAC,EAAAC,cAAA,OAAKE,IAAI,SAASC,IAAG,wBAAAC,OAA0BP,EAA1B,YACrBC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,UAAKL,GACLG,EAAAC,EAAAC,cAAA,SAAIJ,MCcES,EAnBE,SAAAX,GAAgB,IAAbY,EAAaZ,EAAbY,OACnB,OACCR,EAAAC,EAAAC,cAAA,WAEIM,EAAOC,IAAI,SAACC,EAAMC,GACnB,OACCX,EAAAC,EAAAC,cAACU,EAAD,CACCC,IAAKF,EACLZ,GAAIS,EAAOG,GAAGZ,GACdF,KAAMW,EAAOG,GAAGd,KAChBC,MAAOU,EAAOG,GAAGb,YCETgB,EAbG,SAAAlB,GAAmCA,EAAhCmB,YAAgC,IAAnBC,EAAmBpB,EAAnBoB,aACjC,OACChB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACfH,EAAAC,EAAAC,cAAA,SACCC,UAAU,mCACVc,KAAK,SACLC,YAAY,gBACZC,SAAUH,MCCEI,EARA,SAACC,GACf,OACCrB,EAAAC,EAAAC,cAAA,OAAKoB,MAAO,CAACC,UAAW,SAAUC,OAAQ,kBAAmBC,OAAQ,UACnEJ,EAAMK,WCwCKC,qBAtCd,SAAAA,IAAc,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACbC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QAaDI,eAAiB,SAACC,GACjBR,EAAKS,SAAS,CAAEtB,YAAaqB,EAAME,OAAOC,SAb1CX,EAAKY,MAAQ,CACZhC,OAAO,GACPO,YAAa,IAJDa,mFAQO,IAAAa,EAAAV,KACnBW,MAAM,8CACJC,KAAK,SAAAC,GAAQ,OAAGA,EAASC,SACzBF,KAAK,SAAAG,GAAK,OAAIL,EAAKJ,SAAS,CAAE7B,OAAQsC,uCAQjC,IAAAC,EACwBhB,KAAKS,MAA7BhC,EADAuC,EACAvC,OAAQO,EADRgC,EACQhC,YACViC,EAAgBxC,EAAOyC,OAAO,SAAAC,GAC9B,OAAOA,EAAMrD,KAAKsD,cAAcC,SAASrC,EAAYoC,iBAExD,OAAQ3C,EAAO6C,OAGlBrD,EAAAC,EAAAC,cAAA,OAAKC,UAAU,MACdH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,MAAd,eACAH,EAAAC,EAAAC,cAACoD,EAAD,CAAWtC,aAAce,KAAKI,iBAC9BnC,EAAAC,EAAAC,cAACqD,EAAD,KACCvD,EAAAC,EAAAC,cAACsD,EAAD,CAAUhD,OAAQwC,MANjBhD,EAAAC,EAAAC,cAAA,4BA1BauD,cCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,iECVNC,IAASC,OAAOhE,EAAAC,EAAAC,cAAC+D,EAAD,MAASC,SAASC,eAAe,SDyH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM3B,KAAK,SAAA4B,GACjCA,EAAaC","file":"static/js/main.a3629062.chunk.js","sourcesContent":["import React from 'react';\n\nconst Card = ({ name, email, id }) => {\n\treturn (\n      <div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\n      \t<img alt='robots' src={`https://robohash.org/${id}?10x10`} />\n      \t<div>\n        \t<h2>{name}</h2>\n        \t<p>{email}</p>\n      \t</div>\n      </div>\n\t);\n}\n\nexport default Card;","import React from 'react';\nimport Card from './Card';\n\nconst CardList = ({ robots }) => {\n\treturn (\n\t\t<div>\n\t\t\t{\n\t\t   \trobots.map((user, i) => {\n\t\t\t\t\treturn (\n\t\t\t\t\t\t<Card \n\t\t\t\t\t\t\tkey={i} \n\t\t\t\t\t\t\tid={robots[i].id} \n\t\t\t\t\t\t\tname={robots[i].name} \n\t\t\t\t\t\t\temail={robots[i].email}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t);\n\t\t\t\t\t})\n\t\t   }\n\t\t</div>\n\t);\n}\n\nexport default CardList;","import React from 'react';\n\nconst SearchBox = ({ searchfield, searchChange }) => {\n\treturn (\n\t\t<div className='pa2'>\n\t\t<input \n\t\t\tclassName='pa3 ba b--green bg-lightest-blue'\n\t\t\ttype='search' \n\t\t\tplaceholder='search robots' \n\t\t\tonChange={searchChange}\n\t\t/>\n\t\t</div>\n\t);\n}\n\nexport default SearchBox;","import React from 'react';\n\nconst Scroll = (props) => {\n\treturn (\n\t\t<div style={{overflowY: 'Scroll', border: '5px solid black', height: '500px'}}>\n\t\t {props.children}\n\t\t</div>\n\t);\n};\n\nexport default Scroll;","import React, { Component } from 'react';\nimport CardList from '../components/CardList';\nimport SearchBox from '../components/SearchBox';\nimport Scroll from '../components/Scroll';\nimport './App.css';\n\nclass App extends Component {\n\tconstructor() {\n\t\tsuper()\n\t\tthis.state = {\n\t\t\trobots:[],\n\t\t\tsearchfield: ''\n\t\t}\n\t}\n   \n  componentDidMount() {\n  \tfetch('https://jsonplaceholder.typicode.com/users')\n  \t\t.then(response=> response.json())\n  \t\t.then(users => this.setState({ robots: users}));\n  }\n\n\tonSearchChange = (event) => {\n\t\tthis.setState({ searchfield: event.target.value })\n    \n\t}\n\n\trender() {\n\t\tconst { robots, searchfield } = this.state;\n\t\tconst filteredRobots= robots.filter(robot => {\n        return robot.name.toLowerCase().includes(searchfield.toLowerCase());\n      })\n    \treturn !robots.length ? \n    \t<h1>Loading</h1>:\n    \t(\n\t\t<div className='tc'>\n\t\t\t<h1 className='f1'>RoboFriends</h1>\n\t\t\t<SearchBox searchChange={this.onSearchChange}/>\n\t\t\t<Scroll>\n\t\t\t\t<CardList robots={filteredRobots}/>\n\t\t\t</Scroll>\n\t\t</div>\n\t\t);\n     }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}